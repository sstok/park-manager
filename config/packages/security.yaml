security:
    password_hashers:
        'Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface': 'auto'

    providers:
        app: { id: 'park_manager.security.user_provider' }
        api: { id: 'park_manager.security.user_provider' }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern: '^/api/'
            provider: api
            stateless: true

            http_basic: ~ # XXX Needs a custom guard and user for split-token with hex-encoded

        main:
            pattern: '^/'
            provider: app
#            user_checker: 'ParkManager\Infrastructure\Security\SecurityUserChecker'

            logout:
                csrf_parameter:       _csrf_token
                csrf_token_id:        logout_main
                path:                 '/logout'
                target:               '/'

            form_login:
                username_parameter: '_email'
                enable_csrf: true
                check_path: park_manager.security_login
                login_path: park_manager.security_login

            remember_me:
                secret:               '%env(APP_SECRET)%'
                token_provider:       { doctrine: true }
                catch_exceptions:     true
                name:                 REMEMBERME
                lifetime:             604800 # one week
                path:                 /
                secure:               true
                httponly:             true
                always_remember_me:   false

            switch_user: { role: CAN_SWITCH_USER, parameter: _impersonate_user }

    access_decision_manager:
        strategy: priority # Stop as soon as one voter votes deny or allow
        allow_if_all_abstain: false

    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/admin/', requires_channel: https, role: ROLE_ADMIN }
        - { path: '^/login$', requires_channel: https, role: PUBLIC_ACCESS }
        - { path: '^/password-reset', requires_channel: https, role: PUBLIC_ACCESS }
        - { path: '^/', requires_channel: https, role: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            'Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface':
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
